FORMAT: 1A
HOST: http://www.silex.me/api/v1.0

# Unifile API

This is the API to manage your users' cloud services from your application.

## Resources

[Unifile, unified access to cloud storage services through a simple web API.](https://github.com/silexlabs/unifile) 

# Group Starting point of the API

## Services list [/services/list]

### List the available services [GET]

+ Response 200 (application/json; charset=utf-8)

        [
            {
                "name": "dropbox",
                "display_name": "Dropbox",
                "image_small": "unifile-assets/services/dropbox.png",
                "description": "Edit html files from your Dropbox.",
                "visible": true,
                "isLoggedIn": true,
                "isConnected": true,
                "isOAuth": true,
                "user": {
                    "display_name": "Alex Hoyau",
                    "quota_info": {
                        "available": 5234491392,
                        "used": 2899550907
                    }
                }
            },
            {
                "name": "ftp",
                "display_name": "FTP",
                "image_small": "unifile-assets/services/ftp.png",
                "description": "Edit files on a web server.",
                "visible": true,
                "isLoggedIn": false,
                "isConnected": false,
                "isOAuth": false
            }
        ]

# Group Service authentication and user account

## User account [/{service}/account]

### List the available information concerning the authenticated user [GET]

+ Response 200 (application/json; charset=utf-8)

        {
            "display_name": "Alex Hoyau",
            "quota_info": {
                "available": 5234491392,
                "used": 2925039543
            }
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "message": "User not connected yet. You need to call the 'login' service first.",
            "code": 401
        }

## Connect the user [/{service}/connect]

### Connect the user and start the oauth process [GET]

After calling connect, you are expected to follow the "authorize_url" provided in the response. There the user will authorize your app to acces his/her data. And then you will want to call the login route.

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true,
            "message": "Now connected. You probably want to <a href=\"/api/v1.0/www-auth\">authenticate</a> now.",
            "authorize_url": "..."
        }

## User login [/{service}/login]

### Login after connection through oauth mechanism [GET]

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "message": "User not authorized.",
            "code": 401
        }

# Group Service actions

## List [/{service}/exec/ls/{path}]

### List files from the authenticated user's cloud storage [GET]

+ Response 200 (application/json; charset=utf-8)

        [
            {
                "name": "a folder name",
                "bytes": 0,
                "modified": "Fri, 06 Dec 2013 08:28:02 +0000",
                "is_dir": true
            },
            {
                "name": "my sample file name.html",
                "bytes": 2162,
                "modified": "Thu, 30 Oct 2014 18:39:10 +0000",
                "is_dir": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "code": 401,
            "message": "User not logged in yet. You need to call the 'login' service first."
        }

## Delete file or folder [/{service}/exec/rm/{path}]

### Remove a file or folder from the authenticated user's cloud storage [GET]

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "code": 401,
            "message": "User not logged in yet. You need to call the 'login' service first."
        }

## Create a folder [/{service}/exec/mkdir/{path}]

### Create an empty folder in the authenticated user's cloud storage [GET]

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "code": 401,
            "message": "User not logged in yet. You need to call the 'login' service first."
        }

## Copy a file [/{service}/exec/cp/{src}:{dst}]

### Copy a file from a location to another in the authenticated user's cloud storage [GET]

src and dst may have to be in the same service? to be tested

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "code": 401,
            "message": "User not logged in yet. You need to call the 'login' service first."
        }

## Move a file [/{service}/exec/mv/{src}:{dst}]

src and dst may have to be in the same service? to be tested

### Move or rename a file from the authenticated user's cloud storage [GET]

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "code": 401,
            "message": "User not logged in yet. You need to call the 'login' service first."
        }

## Get a file [/{service}/exec/get/{path}]

### Get a file from a location to another in the authenticated user's cloud storage [GET]

+ Response 200 (application/octet-stream)

        the file bytes

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "code": 401,
            "message": "User not logged in yet. You need to call the 'login' service first."
        }

## Write to a file [/{service}/exec/put/{path}:{bytes}]

This will overrite the file content if it exists.

### Write to a file in the authenticated user's cloud storage [GET]

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "code": 401,
            "message": "User not logged in yet. You need to call the 'login' service first."
        }

### Write to a file in the authenticated user's cloud storage [POST]

+ Request (application/octet-stream)

        bytes to be wrinten to the file

+ Response 200 (application/json; charset=utf-8)

        {
            "success": true
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "success": false,
            "code": 401,
            "message": "User not logged in yet. You need to call the 'login' service first."
        }

